diff --git a/node_modules/@nuxtjs/auth-next/dist/runtime.js b/node_modules/@nuxtjs/auth-next/dist/runtime.js
index 4550ba8..4981de3 100644
--- a/node_modules/@nuxtjs/auth-next/dist/runtime.js
+++ b/node_modules/@nuxtjs/auth-next/dist/runtime.js
@@ -1463,7 +1463,16 @@ class Oauth2Scheme extends BaseScheme {
       opts.acr_values = this.options.acrValues;
     }
     this.$auth.$storage.setUniversal(this.name + ".state", opts.state);
-    const url = this.options.endpoints.authorization + "?" + encodeQuery(opts);
+    
+    let url = this.options.endpoints.authorization
+    // Authorization endpoint URL may already contain query params
+    if (url.split('/').splice(-1)[0].indexOf('?') === -1 ) {
+      url = url + '?' + encodeQuery(opts)
+    }
+    else {
+      url = url + '&' + encodeQuery(opts)
+    }
+
     window.location.replace(url);
   }
   logout() {
@@ -1472,7 +1481,16 @@ class Oauth2Scheme extends BaseScheme {
         client_id: this.options.clientId + "",
         logout_uri: this.logoutRedirectURI
       };
-      const url = this.options.endpoints.logout + "?" + encodeQuery(opts);
+      
+      let url = this.options.endpoints.logout
+      // Logout endpoint URL may already contain query params
+      if (url.split('/').splice(-1)[0].indexOf('?') === -1 ) {
+        url = url + '?' + encodeQuery(opts)
+      }
+      else {
+        url = url + '&' + encodeQuery(opts)
+      }
+
       window.location.replace(url);
     }
     return this.$auth.reset();
@@ -1693,7 +1711,16 @@ class OpenIDConnectScheme extends Oauth2Scheme {
         id_token_hint: this.idToken.get(),
         post_logout_redirect_uri: this.logoutRedirectURI
       };
-      const url = this.options.endpoints.logout + "?" + encodeQuery(opts);
+      
+      let url = this.options.endpoints.logout
+      // Logout endpoint URL may already contain query params
+      if (url.split('/').splice(-1)[0].indexOf('?') === -1 ) {
+        url = url + '?' + encodeQuery(opts)
+      }
+      else {
+        url = url + '&' + encodeQuery(opts)
+      }
+
       window.location.replace(url);
     }
     return this.$auth.reset();
diff --git a/node_modules/@nuxtjs/auth-next/dist/runtime.mjs b/node_modules/@nuxtjs/auth-next/dist/runtime.mjs
index 64d6242..1dee9ec 100644
--- a/node_modules/@nuxtjs/auth-next/dist/runtime.mjs
+++ b/node_modules/@nuxtjs/auth-next/dist/runtime.mjs
@@ -1,8 +1,8 @@
-import requrl from 'requrl';
-import Vue from 'vue';
 import cookie from 'cookie';
 import defu from 'defu';
 import jwtDecode from 'jwt-decode';
+import requrl from 'requrl';
+import Vue from 'vue';
 
 const isUnset = (o) => typeof o === "undefined" || o === null;
 const isSet = (o) => !isUnset(o);
@@ -1451,16 +1451,35 @@ class Oauth2Scheme extends BaseScheme {
       opts.acr_values = this.options.acrValues;
     }
     this.$auth.$storage.setUniversal(this.name + ".state", opts.state);
-    const url = this.options.endpoints.authorization + "?" + encodeQuery(opts);
+    
+    let url = this.options.endpoints.authorization
+    // Authorization endpoint URL may already contain query params
+    if (url.split('/').splice(-1)[0].indexOf('?') === -1 ) {
+      url = url + '?' + encodeQuery(opts)
+    }
+    else {
+      url = url + '&' + encodeQuery(opts)
+    }
+
     window.location.replace(url);
   }
   logout() {
     if (this.options.endpoints.logout) {
       const opts = {
         client_id: this.options.clientId + "",
-        logout_uri: this.logoutRedirectURI
+        logout_uri: this.logoutRedirectURI,
+        post_logout_redirect_uri:this.logoutRedirectURI // Azure AD B2C require this param
       };
-      const url = this.options.endpoints.logout + "?" + encodeQuery(opts);
+
+      let url = this.options.endpoints.logout
+      // Logout endpoint URL may already contain query params
+      if (url.split('/').splice(-1)[0].indexOf('?') === -1 ) {
+        url = url + '?' + encodeQuery(opts)
+      }
+      else {
+        url = url + '&' + encodeQuery(opts)
+      }
+
       window.location.replace(url);
     }
     return this.$auth.reset();
@@ -1681,7 +1700,17 @@ class OpenIDConnectScheme extends Oauth2Scheme {
         id_token_hint: this.idToken.get(),
         post_logout_redirect_uri: this.logoutRedirectURI
       };
-      const url = this.options.endpoints.logout + "?" + encodeQuery(opts);
+      
+      let url = this.options.endpoints.logout
+      // Logout endpoint URL may already contain query params
+      if (url.split('/').splice(-1)[0].indexOf('?') === -1 ) {
+        url = url + '?' + encodeQuery(opts)
+      }
+      else {
+        url = url + '&' + encodeQuery(opts)
+      }
+
+
       window.location.replace(url);
     }
     return this.$auth.reset();
